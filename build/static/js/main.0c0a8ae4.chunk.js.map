{"version":3,"sources":["components/Cell.js","components/Grid.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","color","cellClass","Math","floor","random","toString","className","id","onClick","selectCell","row","column","style","backgroundColor","Grid","width","console","log","rows","cellId","gridFull","push","key","arrayClone","arr","JSON","parse","stringify","getWindowDimensions","window","innerWidth","height","innerHeight","Main","useState","speed","generation","setGeneration","intId","setIntId","run","setRun","Array","fill","map","setGridFull","useEffect","grid","gridCopy","i","j","count","start","clearInterval","Button","size","setInterval","number","seed","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0c0a8ae4.chunk.js","sourcesContent":["import React  from 'react'\r\n\r\nexport default function Cell(props){\r\n    const select = () => {\r\n        props.selectCell(props.row, props.column)\r\n    }\r\n\r\n    let color = 'ffffff'\r\n    if (props.cellClass === 'alive') {\r\n        color = (Math.floor(Math.random() * 20) * 100 + 156000).toString()\r\n    }\r\n\r\n    return(\r\n        <div className={props.cellClass} id={props.id} onClick={select} style={{backgroundColor: \"#\" + color}}>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport Cell from './Cell'\r\n\r\nexport default function Grid(props) {\r\n    const width = props.column * 15 + props.column\r\n\r\n    console.log(props)\r\n\r\n    var rows = []\r\n    let cellClass = \"\"\r\n\r\n    for(let row = 0; row < props.rows; row++) {\r\n        for(let column = 0; column < props.column; column++) {\r\n            let cellId = row + \"_\" + column;\r\n\r\n            cellClass = props.gridFull[row][column] ? \"alive\" : \"dead\"\r\n\r\n            rows.push(\r\n                <Cell cellClass={cellClass} key={cellId} row={row} column={column} selectCell={props.selectCell}/>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"grid\" style={{width: width}}>\r\n            {rows}\r\n        </div>\r\n    )\r\n}","import React, {useState, useEffect, useRef} from 'react'\r\nimport Grid from './Grid'\r\nimport { Button } from '@material-ui/core'\r\n\r\nfunction arrayClone(arr) {\r\n    return JSON.parse(JSON.stringify(arr))\r\n}\r\n\r\nfunction getWindowDimensions() {\r\n    const {innerWidth: width, innerHeight: height} = window\r\n    return {\r\n        width,\r\n        height\r\n    }\r\n}\r\n\r\nexport default function Main() {\r\n    const height = Math.floor((getWindowDimensions().height / 30))\r\n    const width = Math.floor((getWindowDimensions().width / 30))\r\n\r\n    const [rows, setRows] = useState(height)\r\n    const [column, setColumn] = useState(width)\r\n    const [speed, setSpeed] = useState(1)\r\n    const [generation, setGeneration] = useState(0)\r\n    const [intId, setIntId] = useState()\r\n    const [run, setRun] = useState(false)\r\n    const [gridFull, setGridFull] = useState(Array(rows).fill().map(() => Array(column).fill(false)))\r\n\r\n    useEffect(() => {\r\n        let grid = gridFull;\r\n        let gridCopy = arrayClone(gridFull)\r\n\r\n        for(let i = 0; i < rows; i++) {\r\n            for(let j = 0; j < column; j++) {\r\n                let count = 0\r\n\r\n                if (i > 0) if (grid[i - 1][j]) count++;\r\n                if (i > 0 && j > 0) if (grid[i - 1][j - 1]) count++;\r\n                if (i > 0 && j < column - 1) if (grid[i - 1][j + 1]) count++;\r\n                if (j < column - 1) if (grid[i][j + 1]) count++;\r\n                if (j > 0) if (grid[i][j - 1]) count++;\r\n                if (i < rows - 1) if (grid[i + 1][j]) count++;\r\n                if (i < rows - 1 && j > 0) if (grid[i + 1][j - 1]) count++;\r\n                if (i < rows - 1 && j < column - 1) if (grid[i + 1][j + 1]) count++;\r\n\r\n                if(count < 2 || count > 3) {\r\n                    gridCopy[i][j] = false\r\n                }\r\n                if (count === 3) {\r\n                    gridCopy[i][j] = true\r\n                }\r\n            }\r\n        }\r\n        setGridFull(gridCopy)\r\n    }, [generation])\r\n\r\n    const selectCell = (rows, column) => {\r\n        let gridCopy = arrayClone(gridFull)\r\n        gridCopy[rows][column] = !gridCopy[rows][column]\r\n        setGridFull(gridCopy)\r\n    }\r\n\r\n    const startButton = () => {\r\n        clearInterval(intId)\r\n        if (run) {\r\n            setRun(false)\r\n        } else {\r\n            setRun(true)\r\n            setIntId(setInterval(start, speed))\r\n        }\r\n    }\r\n\r\n    const stopButton = () => {\r\n        clearInterval(intId)\r\n        setRun(false)\r\n    }\r\n\r\n    const nextButton = () => {\r\n        clearInterval(intId)\r\n        setGeneration(generation => generation + 1)\r\n    }\r\n\r\n    const start = () => {\r\n        clearInterval(intId)\r\n        setGeneration(generation => generation + 1)\r\n    }\r\n\r\n    const seed = (number = 30) => {\r\n        let gridCopy = arrayClone(gridFull)\r\n\r\n        for(let i = 0; i < rows; i++) {\r\n            for(let j = 0; j < column; j++) {\r\n                gridCopy[i][j] = false\r\n                if(Math.floor(Math.random() * 1/number*100) === 0) {\r\n                    gridCopy[i][j] = true\r\n                }\r\n            }\r\n        }\r\n\r\n        setGridFull(gridCopy)\r\n    }\r\n\r\n    const reset = () => {\r\n        setGridFull(Array(rows).fill().map(() => Array(column).fill(false)))\r\n        setGeneration(0)\r\n        clearInterval(intId)\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h2>Conway's Game of Life</h2>\r\n                <Button color=\"secondary\" size=\"small\" onClick={() => startButton()}>Start/Stop</Button>\r\n                <Button color=\"primary\" size=\"small\" onClick={() => nextButton()}>Next generation</Button>\r\n                <Button color=\"primary\" size=\"small\" onClick={() => reset()}>Reset</Button>\r\n                <Button color=\"primary\" size=\"small\" onClick={() => seed()}>Randomize</Button>\r\n            <h3>Generation: {generation}</h3>\r\n            <Grid gridFull={gridFull} rows={rows} column={column} selectCell={selectCell} />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport Main from './components/Main'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Main />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}